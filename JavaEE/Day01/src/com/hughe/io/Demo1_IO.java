package com.hughe.io;
/*
IO解决问题：设备与设备之间的数据传输问题。比如：硬盘--->内存	内存--->硬盘

字节流：

输入字节流：
--------|InputStream 所有输入字节流的积累。抽象类
----------|FileInputStream 读取文件的输入字节流
----------|BufferedInputStream 缓冲输入字节流。该类内部其实是维护了一个8kb字节数组而已

输出字节流：
--------|OutputStream 所有输出字节流的基类。抽象类
----------|FileOutputStream 向文件输出数据 的输出字节流
----------|BufferedOutputStream 缓冲输出字节流，该类出现的目的是为了提高向文件写数据的效率，该类内部其实也是维护了一个8kb的字节数组而已

什么情况使用字节流：读取到数据不需要经过编码或者解码的情况下使用字节流，比如：图片数据

字符流=字节流+编码（解码）

字符流：

输入字符流：
---------|Reader 所有输入字符流的基类，抽象类
-----------| FileReader 读取文件字符的输入字符流
-----------| BufferedReader 缓冲输入字符流。该类出现的目的是为了提高读取文件字符的效率并且拓展了功能（readLine()），它内部其实是为了了一个8192个长度的字符数组

输出字符流：
---------|Writer 所有输出字符流的基类。抽象类
-----------| FileWriter 向文件输出字符数据的输出字符流
-----------| BufferedWriter 缓冲输出字符流。该类出现的目的是为了提高读取文件字符的效率并且拓展了功能（newLine()）

什么情况适用字符流：读写的都是字符数据，这时候我们就使用字符流
 */
public class Demo1_IO {

}
